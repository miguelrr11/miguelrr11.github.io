class border{
  constructor(sx, sy, ex, ey, id){
    this.start = createVector(sx, sy)
    this.end = createVector(ex, ey)
    this.dist = Infinity
    this.id = id
  }
  
  createCircuit(){
    let loaded = '{"values":[  {    "x": 258,    "y": 473  },  {    "x": 258,    "y": 334  },  {    "x": 121,    "y": 332  },  {    "x": 118,    "y": 316  },  {    "x": 256,    "y": 319  },  {    "x": 258,    "y": 185  },  {    "x": 119,    "y": 183  },  {    "x": 120,    "y": 170  },  {    "x": 256,    "y": 170  },  {    "x": 376,    "y": 120  },  {    "x": 397,    "y": 116  },  {    "x": 418,    "y": 124  },  {    "x": 488,    "y": 194  },  {    "x": 424,    "y": 259  },  {    "x": 488,    "y": 329  },  {    "x": 432,    "y": 391  },  {    "x": 494,    "y": 461  },  {    "x": 491,    "y": 478  },  {    "x": 418,    "y": 476  },  {    "x": 416,    "y": 223  },  {    "x": 406,    "y": 205  },  {    "x": 384,    "y": 196  },  {    "x": 354,    "y": 209  },  {    "x": 338,    "y": 210  },  {    "x": 317,    "y": 198  },  {    "x": 298,    "y": 200  },  {    "x": 276,    "y": 225  },  {    "x": 272,    "y": 493  },  {    "x": 119,    "y": 495  },  {    "x": 119,    "y": 483  },  {    "x": 256,    "y": 483  }]}'
    let loadedJSON = JSON.parse(loaded)
    let values = loadedJSON.values
    for(let i = 0; i < values.length-1; i++){
      circuit.push(new border(values[i].x, values[i].y, values[i+1].x, values[i+1].y))
    }
    circuit.push(new border(values[values.length-1].x, values[values.length-1].y, values[0].x, values[0].y))
    loaded = '{"values":[  {    "x": 190,    "y": 424  },  {    "x": 187,    "y": 390  },  {    "x": 37,    "y": 385  },  {    "x": 37,    "y": 265  },  {    "x": 184,    "y": 266  },  {    "x": 184,    "y": 252  },  {    "x": 38,    "y": 250  },  {    "x": 38,    "y": 81  },  {    "x": 48,    "y": 50  },  {    "x": 86,    "y": 32  },  {    "x": 469,    "y": 30  },  {    "x": 507,    "y": 50  },  {    "x": 525,    "y": 85  },  {    "x": 526,    "y": 149  },  {    "x": 569,    "y": 195  },  {    "x": 511,    "y": 258  },  {    "x": 568,    "y": 320  },  {    "x": 512,    "y": 381  },  {    "x": 575,    "y": 447  },  {    "x": 573,    "y": 522  },  {    "x": 557,    "y": 556  },  {    "x": 535,    "y": 568  },  {    "x": 506,    "y": 572  },  {    "x": 493,    "y": 555  },  {    "x": 482,    "y": 573  },  {    "x": 430,    "y": 570  },  {    "x": 418,    "y": 552  },  {    "x": 405,    "y": 573  },  {    "x": 378,    "y": 566  },  {    "x": 357,    "y": 551  },  {    "x": 353,    "y": 526  },  {    "x": 349,    "y": 263  },  {    "x": 341,    "y": 263  },  {    "x": 340,    "y": 526  },  {    "x": 331,    "y": 554  },  {    "x": 301,    "y": 572  },  {    "x": 88,    "y": 571  },  {    "x": 63,    "y": 561  },  {    "x": 41,    "y": 534  },  {    "x": 37,    "y": 516  },  {    "x": 39,    "y": 426  },  {    "x": 186,    "y": 426  }]}'
    loadedJSON = JSON.parse(loaded)
    values = loadedJSON.values
    for(let i = 0; i < values.length-1; i++){
      circuit.push(new border(values[i].x, values[i].y, values[i+1].x, values[i+1].y))
    }
    circuit.push(new border(values[values.length-1].x, values[values.length-1].y, values[0].x, values[0].y))
    circuit.push(new border(120, 94, 121, 108))
    circuit.push(new border(121, 108, 261, 109))
    circuit.push(new border(261, 109, 277, 103))
    circuit.push(new border(277, 103, 277, 95))
    circuit.push(new border(277, 95, 119, 94))
    circuit.push(new border(119, 94, 120, 94))
  }

  createCheckPoints(){
    let loaded = '{"values":[  {    "x": 168,    "y": 399  },  {    "x": 269,    "y": 382  },  {    "x": 263,    "y": 347  },  {    "x": 171,    "y": 395  },  {    "x": 175,    "y": 391  },  {    "x": 240,    "y": 328  },  {    "x": 200,    "y": 326  },  {    "x": 179,    "y": 397  },  {    "x": 175,    "y": 390  },  {    "x": 174,    "y": 326  },  {    "x": 158,    "y": 328  },  {    "x": 154,    "y": 401  },  {    "x": 134,    "y": 396  },  {    "x": 135,    "y": 328  },  {    "x": 127,    "y": 337  },  {    "x": 102,    "y": 399  },  {    "x": 51,    "y": 393  },  {    "x": 127,    "y": 325  },  {    "x": 125,    "y": 326  },  {    "x": 25,    "y": 368  },  {    "x": 26,    "y": 328  },  {    "x": 131,    "y": 326  },  {    "x": 129,    "y": 328  },  {    "x": 22,    "y": 294  },  {    "x": 29,    "y": 255  },  {    "x": 125,    "y": 331  },  {    "x": 130,    "y": 330  },  {    "x": 81,    "y": 259  },  {    "x": 117,    "y": 258  },  {    "x": 132,    "y": 324  },  {    "x": 148,    "y": 330  },  {    "x": 144,    "y": 256  },  {    "x": 168,    "y": 257  },  {    "x": 169,    "y": 324  },  {    "x": 194,    "y": 322  },  {    "x": 180,    "y": 258  },  {    "x": 182,    "y": 255  },  {    "x": 225,    "y": 323  },  {    "x": 258,    "y": 322  },  {    "x": 181,    "y": 256  },  {    "x": 181,    "y": 255  },  {    "x": 262,    "y": 290  },  {    "x": 267,    "y": 262  },  {    "x": 179,    "y": 255  },  {    "x": 180,    "y": 257  },  {    "x": 266,    "y": 231  },  {    "x": 267,    "y": 201  },  {    "x": 182,    "y": 257  },  {    "x": 182,    "y": 257  },  {    "x": 234,    "y": 174  },  {    "x": 194,    "y": 175  },  {    "x": 183,    "y": 255  },  {    "x": 176,    "y": 253  },  {    "x": 169,    "y": 178  },  {    "x": 148,    "y": 176  },  {    "x": 149,    "y": 251  },  {    "x": 119,    "y": 249  },  {    "x": 124,    "y": 177  },  {    "x": 124,    "y": 177  },  {    "x": 84,    "y": 252  },  {    "x": 29,    "y": 246  },  {    "x": 129,    "y": 178  },  {    "x": 124,    "y": 176  },  {    "x": 23,    "y": 203  },  {    "x": 32,    "y": 176  },  {    "x": 127,    "y": 175  },  {    "x": 132,    "y": 177  },  {    "x": 26,    "y": 130  },  {    "x": 30,    "y": 103  },  {    "x": 136,    "y": 176  },  {    "x": 141,    "y": 174  },  {    "x": 37,    "y": 58  },  {    "x": 66,    "y": 29  },  {    "x": 144,    "y": 175  },  {    "x": 149,    "y": 177  },  {    "x": 106,    "y": 20  },  {    "x": 150,    "y": 24  },  {    "x": 148,    "y": 174  },  {    "x": 179,    "y": 172  },  {    "x": 178,    "y": 25  },  {    "x": 211,    "y": 23  },  {    "x": 212,    "y": 174  },  {    "x": 237,    "y": 173  },  {    "x": 239,    "y": 24  },  {    "x": 269,    "y": 24  },  {    "x": 271,    "y": 172  },  {    "x": 307,    "y": 157  },  {    "x": 300,    "y": 22  },  {    "x": 327,    "y": 25  },  {    "x": 333,    "y": 151  },  {    "x": 360,    "y": 139  },  {    "x": 360,    "y": 17  },  {    "x": 382,    "y": 25  },  {    "x": 384,    "y": 123  },  {    "x": 409,    "y": 125  },  {    "x": 411,    "y": 17  },  {    "x": 449,    "y": 22  },  {    "x": 412,    "y": 128  },  {    "x": 429,    "y": 144  },  {    "x": 476,    "y": 22  },  {    "x": 508,    "y": 45  },  {    "x": 434,    "y": 146  },  {    "x": 452,    "y": 165  },  {    "x": 532,    "y": 68  },  {    "x": 537,    "y": 109  },  {    "x": 462,    "y": 173  },  {    "x": 470,    "y": 187  },  {    "x": 550,    "y": 157  },  {    "x": 577,    "y": 194  },  {    "x": 472,    "y": 190  },  {    "x": 457,    "y": 217  },  {    "x": 559,    "y": 216  },  {    "x": 536,    "y": 243  },  {    "x": 433,    "y": 239  },  {    "x": 427,    "y": 268  },  {    "x": 522,    "y": 266  },  {    "x": 555,    "y": 300  },  {    "x": 457,    "y": 296  },  {    "x": 478,    "y": 325  },  {    "x": 570,    "y": 328  },  {    "x": 546,    "y": 357  },  {    "x": 449,    "y": 353  },  {    "x": 425,    "y": 387  },  {    "x": 525,    "y": 382  },  {    "x": 551,    "y": 418  },  {    "x": 445,    "y": 415  },  {    "x": 471,    "y": 444  },  {    "x": 575,    "y": 441  },  {    "x": 580,    "y": 472  },  {    "x": 483,    "y": 468  },  {    "x": 469,    "y": 466  },  {    "x": 584,    "y": 504  },  {    "x": 574,    "y": 541  },  {    "x": 477,    "y": 467  },  {    "x": 471,    "y": 476  },  {    "x": 548,    "y": 571  },  {    "x": 499,    "y": 580  },  {    "x": 467,    "y": 470  },  {    "x": 454,    "y": 462  },  {    "x": 456,    "y": 578  },  {    "x": 426,    "y": 564  },  {    "x": 440,    "y": 466  },  {    "x": 439,    "y": 463  },  {    "x": 392,    "y": 581  },  {    "x": 367,    "y": 570  },  {    "x": 443,    "y": 461  },  {    "x": 439,    "y": 460  },  {    "x": 348,    "y": 543  },  {    "x": 348,    "y": 510  },  {    "x": 430,    "y": 470  },  {    "x": 427,    "y": 464  },  {    "x": 345,    "y": 470  },  {    "x": 346,    "y": 446  },  {    "x": 429,    "y": 449  },  {    "x": 420,    "y": 417  },  {    "x": 343,    "y": 418  },  {    "x": 345,    "y": 385  },  {    "x": 421,    "y": 385  },  {    "x": 420,    "y": 344  },  {    "x": 345,    "y": 345  },  {    "x": 343,    "y": 316  },  {    "x": 426,    "y": 314  },  {    "x": 423,    "y": 289  },  {    "x": 347,    "y": 290  },  {    "x": 346,    "y": 271  },  {    "x": 422,    "y": 267  },  {    "x": 425,    "y": 230  },  {    "x": 348,    "y": 269  },  {    "x": 344,    "y": 270  },  {    "x": 410,    "y": 194  },  {    "x": 377,    "y": 202  },  {    "x": 344,    "y": 267  },  {    "x": 344,    "y": 266  },  {    "x": 341,    "y": 193  },  {    "x": 307,    "y": 183  },  {    "x": 342,    "y": 266  },  {    "x": 344,    "y": 277  },  {    "x": 278,    "y": 202  },  {    "x": 268,    "y": 246  },  {    "x": 344,    "y": 279  },  {    "x": 346,    "y": 284  },  {    "x": 265,    "y": 276  },  {    "x": 267,    "y": 301  },  {    "x": 347,    "y": 298  },  {    "x": 343,    "y": 324  },  {    "x": 269,    "y": 328  },  {    "x": 267,    "y": 357  },  {    "x": 344,    "y": 359  },  {    "x": 345,    "y": 391  },  {    "x": 269,    "y": 397  },  {    "x": 270,    "y": 430  },  {    "x": 344,    "y": 426  },  {    "x": 345,    "y": 458  },  {    "x": 274,    "y": 458  },  {    "x": 266,    "y": 481  },  {    "x": 344,    "y": 488  },  {    "x": 346,    "y": 525  },  {    "x": 262,    "y": 483  },  {    "x": 258,    "y": 483  },  {    "x": 338,    "y": 552  },  {    "x": 314,    "y": 575  },  {    "x": 258,    "y": 484  },  {    "x": 258,    "y": 484  },  {    "x": 291,    "y": 580  },  {    "x": 254,    "y": 579  },  {    "x": 258,    "y": 484  },  {    "x": 240,    "y": 483  },  {    "x": 241,    "y": 581  },  {    "x": 237,    "y": 580  },  {    "x": 210,    "y": 490  },  {    "x": 211,    "y": 577  },  {    "x": 181,    "y": 489  },  {    "x": 157,    "y": 487  },  {    "x": 162,    "y": 579  },  {    "x": 131,    "y": 572  },  {    "x": 130,    "y": 485  },  {    "x": 128,    "y": 487  },  {    "x": 92,    "y": 583  },  {    "x": 62,    "y": 571  },  {    "x": 123,    "y": 488  },  {    "x": 123,    "y": 488  },  {    "x": 35,    "y": 534  },  {    "x": 30,    "y": 472  },  {    "x": 126,    "y": 491  },  {    "x": 125,    "y": 488  },  {    "x": 66,    "y": 417  },  {    "x": 115,    "y": 416  },  {    "x": 123,    "y": 490  },  {    "x": 149,    "y": 418  },  {    "x": 150,    "y": 486  },  {    "x": 178,    "y": 420  },  {    "x": 180,    "y": 486  },  {    "x": 184,    "y": 416  },  {    "x": 216,    "y": 486  },  {    "x": 180,    "y": 414  },  {    "x": 264,    "y": 473  },  {    "x": 182,    "y": 416  },  {    "x": 265,    "y": 439  }]}'
    let loadedJSON = JSON.parse(loaded)
    let values = loadedJSON.values
    for(let i = 0; i < values.length-1; i += 2){
      checkpoints.push(new border(values[i].x, values[i].y, values[i+1].x, values[i+1].y, i/2))
    }
  }

  
  inter(ls, le) {
    const x1 = this.start.x;
    const y1 = this.start.y;
    const x2 = this.end.x;
    const y2 = this.end.y;
    const x3 = ls.x;
    const y3 = ls.y;
    const x4 = le.x;
    const y4 = le.y;

    const den = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1));
    const num1 = ((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3));
    const num2 = ((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3));

    if (den == 0) {
        return false;
    }

    const t1 = num1 / den;
    const t2 = num2 / den;

    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {
        const ix = x1 + (t1 * (x2 - x1));
        const iy = y1 + (t1 * (y2 - y1));
        return createVector(ix, iy);
    } else {
        return false;
    }
}
  
  show(){
    push()
    stroke(0)
    strokeWeight(2)
    line(this.start.x, this.start.y, this.end.x, this.end.y)
    noStroke()
    if(this.id) text(this.id, (this.start.x+this.end.x)/2, (this.start.y+this.end.y)/2)
    pop()
  }
  
}